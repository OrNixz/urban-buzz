<% layout("layouts/app") %>
<link rel="stylesheet" href="/css/stars.css">

<div class="row">
    <div class="col-6">
        <div class="card">
            <div id="carouselExample" class="carousel slide">
                <div class="carousel-inner">
                    <% if (place.images.length) { %>
                        <div class="ratio ratio-16x9">
                            <% place.images.forEach((image, index) => { %>
                                <div class="carousel-item <%= index === 0 ? "active": "" %>">
                                    <img src="/images/<%= image.filename %>" class="d-block w-100" alt="<%= place.title %>">
                                </div>
                            <% }) %>
                        </div>
                    <% } else { %>
                        <div class="carousel-item <%= index === 0 ? "active": "" %>">
                            <img src="https://images.unsplash.com/photo-1431274172761-fca41d930114?w=900&auto=format&fit=crop&q=60&ixlib=rb-4.0.3&ixid=M3wxMjA3fDB8MHxzZWFyY2h8Mnx8ZWlmZmVsJTIwdG93ZXJ8ZW58MHwwfDB8fHww" class="d-block w-100" alt="<%= place.title %>">
                        </div>
                    <% } %>
                </div>
                <% if (place.images.length > 1) { %>
                    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExample" data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#carouselExample" data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                <% } %>
            </div>
            <div class="card-body">
                <h5 class="card-title"><%= place.title %></h5>
                <p class="card-text"><%= place.description %></p>
                <ul class="list-group list-group-flash">
                    <li class="list-group-item"><b>Price:</b> <%= place.price %></li>
                    <li class="list-group-item"><b>Location:</b> <%= place.location %></li>
                    <li class="list-group-item"><b>Author:</b> <%= place.author.username %></li>
                </ul>
            </div>
            <% if (currentUser && place.author.equals(currentUser._id)) { %>
            <div class="card-body d-flex justify-content-end">
                <a href="/places/<%= place._id %>/edit" class="btn btn-warning text-white" style="margin-right: 0.5rem;">Edit</a>
                <form action="/places/<%= place._id %>?_method=DELETE" method="POST" class="d-inline">
                    <button type="submit" class="btn btn-danger">Delete</button>
                </form>
            </div>
            <% } %>
        </div>
    </div>
    <div class="col-6">
        <div style="width: 640px; height: 360px; margin-bottom: 5%" id="mapContainer"></div>
        <% if (currentUser) { %>
        <h4 class="mb-3">Leave a review</h4>
        <form action="/places/<%= place._id %>/reviews" method="POST" class="needs-validation mb-5" novalidate>
            <div class="mb-3">
                <label for="rating" class="form-label">Rating</label>
                <fieldset class="starability-basic">
                    <input type="radio" id="no-rate" class="input-no-rate" name="review[rating]" value="1" checked aria-label="No rating." />
                    <input type="radio" id="first-rate1" name="review[rating]" value="1" />
                    <label for="first-rate1" title="Terrible">1 star</label>
                    <input type="radio" id="first-rate2" name="review[rating]" value="2" />
                    <label for="first-rate2" title="Not good">2 stars</label>
                    <input type="radio" id="first-rate3" name="review[rating]" value="3" />
                    <label for="first-rate3" title="Average">3 stars</label>
                    <input type="radio" id="first-rate4" name="review[rating]" value="4" />
                    <label for="first-rate4" title="Very good">4 stars</label>
                    <input type="radio" id="first-rate5" name="review[rating]" value="5" />
                    <label for="first-rate5" title="Amazing">5 stars</label>
                </fieldset>
            </div>
            <div class="mb-3">
                <label for="body" class="form-label">Review</label>
                <textarea name="review[body]" id="body" cols="30" rows="5" class="form-control" required></textarea>
                <div class="valid-feedback">
                    Looks good!
                </div>
                <div class="invalid-feedback">
                    Please provide a valid review.
                </div>
            </div>
            <div class="d-flex justify-content-end">
                <button type="submit" class="btn btn-success">Submit</button>
            </div>
        </form>
        <% } %>
        <% for (const review of place.reviews) { %>
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-subtitle mb-2 text-secondary"><%= review.author.username %></h6>
                    <p class="starability-result" data-rating="<%= review.rating %>">
                        Rated: <%= review.rating %> stars
                    </p>
                    <p class="card-text"><%= review.body %></p>
                    <% if (currentUser && review.author.equals(currentUser._id)) { %>
                    <div class="d-flex justify-content-end">
                        <form action="/places/<%= place._id %>/reviews/<%= review._id %>?_method=DELETE" method="POST" class="d-inline">
                            <button type="submit" class="btn btn-danger btn-sm">Delete</button>
                        </form>
                    </div>
                    <% } %>
                </div>
            </div>
        <% } %>
    </div>
</div>

<script>
    const place = <%- JSON.stringify(place) %>
    const placeLocation = { lng: place.geometry.coordinates[0], lat: place.geometry.coordinates[1] };
    const content = '<div>' +
        `<h5>${place.title}</h5>` +
        `<p>Price: ${place.price}</p>` +
        '</div>';
</script>

<script>
    function addMarker(group, coordinates, html) {
        // Define a variable holding SVG mark-up that defines an icon image:
        const svgMarker = `<svg viewBox="0 0 1024 1024" class="icon" version="1.1" xmlns="http://www.w3.org/2000/svg" fill="#000000"><g id="SVGRepo_bgCarrier" stroke-width="0"></g><g id="SVGRepo_tracerCarrier" stroke-linecap="round" stroke-linejoin="round"></g><g id="SVGRepo_iconCarrier"><path d="M512 85.333333c-164.949333 0-298.666667 133.738667-298.666667 298.666667 0 164.949333 298.666667 554.666667 298.666667 554.666667s298.666667-389.717333 298.666667-554.666667c0-164.928-133.717333-298.666667-298.666667-298.666667z m0 448a149.333333 149.333333 0 1 1 0-298.666666 149.333333 149.333333 0 0 1 0 298.666666z" fill="#cc3000"></path></g></svg>`
        
        // Create an icon, an object holding the latitude and longitude, and a marker:
        const icon = new H.map.Icon(svgMarker, { size: { h: 50, w: 50 } });
        const marker = new H.map.Marker(placeLocation, { icon: icon });

        // add custom data to the marker
        marker.setData(html);
        group.addObject(marker)
    }
    
    function addInfoBubble(map) {
        const group = new H.map.Group();

        map.addObject(group);

        // add 'tap' event listener, that opens info bubble, to the group
        group.addEventListener("tap", (e) => {
            // event target is the marker itself, group is a parent event target
            // for all objects that it contains
            const bubble = new H.ui.InfoBubble(e.target.getGeometry(), {
                // read custom data
                content: e.target.getData()
            });
            // show info bubble
            ui.addBubble(bubble);
        }, false)

        addMarker(group, placeLocation, content)
    }

    // Initialize the platform object
    const platform = new H.service.Platform({
        "apikey": `A8LZInwBEG3Jcl3yduaGZmyAV3Ch_mxIHD_2pgaJMdQ`
    });

    // Obtain the default map types from the platform object
    const defaultLayers = platform.createDefaultLayers();

    // Instantiate (and display) the map
    const map = new H.Map(
        document.getElementById('mapContainer'),
        defaultLayers.vector.normal.map,
        {
            zoom: 10,
            center: placeLocation,
        });

    // Create the default UI:
    const ui = H.ui.UI.createDefault(map, defaultLayers, "en-US");
    
    // The behavior variable implements default interactions for pan/zoom (also on mobile touch environments).
    const behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

    addInfoBubble(map)
</script>